---
# +-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+
# |G|I|T|H|U|B| |S|P|E|C|I|F|I|C|
# +-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+

# Add your GitHub token
# Defaults to using key returned by
# $ security find-internet-password -s github.com  | grep "acct" | awk -F\" '{ print $4 }'
# flag (--token, -t) eg: --token=bGVhdmUgYSBjb21tZW50IG9uIGlzc3VlIDY2
GHORG_GITHUB_TOKEN:

# A comma seperated list of topics to filter by
# Defaults to ""
# If any topics exist here, ghorg will only clone repos that match at least one of these topics
GHORG_GITHUB_TOPICS:


# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# |G|I|T|L|A|B| |S|P|E|C|I|F|I|C|
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

# Change SCM base url, for on self hosted instances (currently gitlab only, use format of https://git.mydomain.com/api/v3)
# default: gitlab.com/api/v3
# flag (--base-url)
GHORG_SCM_BASE_URL:

# Add your GitLab token
# Defaults to using key returned by
# $ security find-internet-password -s gitlab.com  | grep "acct" | awk -F\" '{ print $4 }'
# flag (--token, -t) eg: --token=bGVhdmUgYSBjb21tZW50IG9uIGlzc3VlIDY2
GHORG_GITLAB_TOKEN:

# flag (--namespace, -n)
GHORG_GITLAB_DEFAULT_NAMESPACE:

# clones repos in a directory structure that matches gitlab namespaces eg company/unit/subunit/app would clone into *_ghorg/unit/subunit/app
# default: false
# flag (--preserve-dir)
GHORG_PRESERVE_DIRECTORY_STRUCTURE:


# +-+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+
# |B|I|T|B|U|C|K|E|T| |S|P|E|C|I|F|I|C|
# +-+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+

# Add your Bitbucket app password
# https://confluence.atlassian.com/bitbucket/app-passwords-828781300.html
# flag (--token, -t) eg: --token=bGVhdmUgYSBjb21tZW50IG9uIGlzc3VlIDY2
GHORG_BITBUCKET_APP_PASSWORD:

# flag (--bitbucket-username)
GHORG_BITBUCKET_USERNAME:


# +-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+-+-+-+-+
# |G|E|N|E|R|A|L| |C|O|N|F|I|G|U|R|A|T|I|O|N|
# +-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+-+-+-+-+

# Which provider to clone from (github, gitlab, or bitbucket)
# default: github
# flag (--scm, -s)
GHORG_SCM_TYPE:

# How you'd like to clone the repos (https or ssh)
# default: https
# flag (--protocol)
GHORG_CLONE_PROTOCOL:

# This is where your *_ghorg directory will be created, use absolute pathing. Must end with /, if not one will be added for you
# default: $HOME/Desktop/ghorg
# flag (--path, -p)
GHORG_ABSOLUTE_PATH_TO_CLONE_TO:

# Branch ghorg resets and leaves checked out
# default:  master
# flag (--branch, -b)
GHORG_BRANCH:

# Type of entity to clone (user or org)
# default: org
# flag (--clone-type, -c)
GHORG_CLONE_TYPE:

# Color output (on, off)
# default: on
# flag (--color)
GHORG_COLOR:

# Skip archived repos (true/false), currently github/gitlab only
# default: false
# flag (--skip-archived)
GHORG_SKIP_ARCHIVED:

# Backup mode, clone as mirror, no working copy (ignores branch parameter) (true/false)
# default: false
# flag (--backup)
GHORG_BACKUP:

# Max goroutines created while cloning
# default: 25
# flag (--concurrency)
GHORG_CONCURRENCY:

# Folder ghorg will clone all repos into, will force underscores and append _ghorg. Cloning will result in: GHORG_ABSOLUTE_PATH_TO_CLONE_TO/GHORG_OUTPUT_DIR/*
# default: {org/user you are cloning}_ghorg
# flag (--output-dir)
GHORG_OUTPUT_DIR:

# Partial clone filter that will be used to grab a subset of reachable objects
# https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---filterltfilter-specgt
# The most common use case would be "blob:none" to prevent binary objects from being downloaded
# Multiple filters can be specified by "combine:<filter1>+<filter2>+…​<filterN>"
# This can only be set during the initial clone!
# default: ""
# flag (--filter)
GHORG_FILTER:
